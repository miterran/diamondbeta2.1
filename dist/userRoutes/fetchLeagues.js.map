{"version":3,"sources":["../../src/userRoutes/fetchLeagues.js"],"names":["defaults","headers","common","apiKey","router","Router","get","req","res","then","masterData","response","data","map","event","Sport","Array","isArray","leagues","leagueName","region","details","oddTypes","Odds","addOdd","every","oddType","odd","OddType","push","soccerDetail","League","Name","DisplayRegion","addSoccerDetail","detail","name","json","catch","console","log","status","send"],"mappings":"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","file":"fetchLeagues.js","sourcesContent":["import config from '../config';\nimport sportConfig from '../utils/sportConfig';\nimport express from 'express';\nimport axios from 'axios';\naxios.defaults.headers.common['JsonOdds-API-Key'] = config.apiKey;\nconst router = express.Router();\n\nrouter.get('/fetch-leagues', (req, res) => {\n    axios.get('https://jsonodds.com/api/odds').then(response => {\n        const masterData = response.data;\n        masterData.map(event => {\n            switch(event.Sport){\n                case 0: // MLB Baseball\n                case 1: // NBA Basketball\n                case 2: // NCAAB Basketball\n                case 3: // NCAAF Football\n                case 4: // NFL Football\n                case 5: // NHL Hockey\n                case 8: // WNBA Basketball\n                case 10: // BOXING\n                case 11: // MMA\n//                case 12: // CRICKET\n                case 14: // KHL Hockey\n                case 15: // AHL Hockey\n                case 16: // SHL Hockey\n//                case 17: // HALL\n//                case 18: // LMP\n                case 19: // NPB Baseball\n                case 20: // KBO Baseball\n//                case 21: // Golf\n                case 22: // RUGBY Football\n                case 23: // WBC BaseBall\n                    Array.isArray(sportConfig[event.Sport].leagues) ? null : sportConfig[event.Sport].leagues = [{leagueName: '', region: '', details: '', oddTypes: []}];\n                    event.Odds.map(odd => {\n                        const addOdd = sportConfig[event.Sport].leagues[0].oddTypes.every(oddType => oddType !== odd.OddType);\n                        addOdd ? sportConfig[event.Sport].leagues[0].oddTypes.push(odd.OddType) : null;\n                        return odd;\n                    })\n\n                    break;\n                case 7: // SOCCER\n                    Array.isArray(sportConfig[7].leagues) ? null : sportConfig[7].leagues = [];\n                    const soccerDetail = { leagueName: event.League.Name , region: event.DisplayRegion, details: '', oddTypes: [] };\n                    const addSoccerDetail = sportConfig[7].leagues.every(detail => detail.name !== event.League.Name && detail.region !== event.DisplayRegion);\n                    addSoccerDetail ? sportConfig[7].leagues.push(soccerDetail) : null;\n                    event.Odds.map(odd => {\n                        sportConfig[7].leagues.map(detail => {\n                            if(detail.leagueName === event.League.Name && detail.region === event.DisplayRegion){\n                                const addOdd = detail.oddTypes.every(oddType => oddType !== odd.OddType);\n                                addOdd ? detail.oddTypes.push(odd.OddType) : null;\n                            }\n                            return detail;\n                        })\n                        return odd;\n                    })\n                    break;\n                default:\n                    return;\n            }  \n            return event;\n        })\n        return res.json(sportConfig);\n    }).catch(error => {\n        console.log('fetch leagues list failed')\n        return res.status(404).send('fetch leagues list failed')\n    })\n})\n\nexport default router;\n\n//detail.oddTypes.sort((a, b) => sortOddTypes.indexOf(a) - sortOddTypes.indexOf(b))"]}