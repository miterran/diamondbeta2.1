{"version":3,"sources":["../src/config.js"],"names":["require","config","envVarsSchema","object","NODE_ENV","string","allow","default","PORT","number","MONGOOSE_DEBUG","boolean","when","is","equal","then","otherwise","JWT_SECRET","required","description","MONGO_HOST","API_KEY","unknown","validate","process","env","error","envVars","value","Error","message","port","mongooseDebug","jwtSecret","mongoURL","apiKey"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;AACA,IAAMC,gBAAgB,cAAIC,MAAJ,CAAW;AAC/BC,YAAU,cAAIC,MAAJ,GAAaC,KAAb,CAAmB,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,WAAtC,CAAnB,EAAuEC,OAAvE,CAA+E,aAA/E,CADqB;AAE/BC,QAAM,cAAIC,MAAJ,GAAaF,OAAb,CAAqB,IAArB,CAFyB;AAG/BG,kBAAgB,cAAIC,OAAJ,GAAcC,IAAd,CAAmB,UAAnB,EAA+B;AAC3CC,QAAI,cAAIR,MAAJ,GAAaS,KAAb,CAAmB,aAAnB,CADuC;AAE3CC,UAAM,cAAIJ,OAAJ,GAAcJ,OAAd,CAAsB,IAAtB,CAFqC;AAG3CS,eAAW,cAAIL,OAAJ,GAAcJ,OAAd,CAAsB,KAAtB;AAHgC,GAA/B,CAHe;AAQ/BU,cAAY,cAAIZ,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,6BAApC,CARmB;AAS/BC,cAAY,cAAIf,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,mBAApC,CATmB;AAU/BE,WAAS,cAAIhB,MAAJ,GAAaa,QAAb,GAAwBC,WAAxB,CAAoC,cAApC;AAVsB,CAAX,EAWnBG,OAXmB,GAYnBJ,QAZmB,EAAtB;;oBAckC,cAAIK,QAAJ,CAAaC,QAAQC,GAArB,EAA0BvB,aAA1B,C;IAA1BwB,K,iBAAAA,K;IAAcC,O,iBAAPC,K;;AACf,IAAIF,KAAJ,EAAW;AACT,QAAM,IAAIG,KAAJ,+BAAsCH,MAAMI,OAA5C,CAAN;AACD;;AAED,IAAM7B,SAAS;AACbwB,OAAKE,QAAQvB,QADA;AAEb2B,QAAMJ,QAAQnB,IAFD;AAGbwB,iBAAeL,QAAQjB,cAHV;AAIbuB,aAAWN,QAAQV,UAJN;AAKbiB,YAAUP,QAAQP,UALL;AAMbe,UAAQR,QAAQN;AANH,CAAf;;kBASepB,M","file":"config.js","sourcesContent":["import Joi from 'joi';\n\n// require and configure dotenv, will load vars in .env in PROCESS.ENV\nrequire('dotenv').config();\n\n// define validation for all the env vars\nconst envVarsSchema = Joi.object({\n  NODE_ENV: Joi.string().allow(['development', 'production', 'test', 'provision']).default('development'),\n  PORT: Joi.number().default(8080),\n  MONGOOSE_DEBUG: Joi.boolean().when('NODE_ENV', {\n      is: Joi.string().equal('development'),\n      then: Joi.boolean().default(true),\n      otherwise: Joi.boolean().default(false)\n    }),\n  JWT_SECRET: Joi.string().required().description('JWT Secret required to sign'),\n  MONGO_HOST: Joi.string().required().description('Mongo DB host url'),\n  API_KEY: Joi.string().required().description('ODDS API KEY')\n}).unknown()\n  .required();\n\nconst { error, value: envVars } = Joi.validate(process.env, envVarsSchema);\nif (error) {\n  throw new Error(`Config validation error: ${error.message}`);\n}\n\nconst config = {\n  env: envVars.NODE_ENV,\n  port: envVars.PORT,\n  mongooseDebug: envVars.MONGOOSE_DEBUG,\n  jwtSecret: envVars.JWT_SECRET,\n  mongoURL: envVars.MONGO_HOST,\n  apiKey: envVars.API_KEY\n};\n\nexport default config;\n"]}